
void update(int ind, int l, int r, int ind2, int val)
{
  if(l==r)
  {
    segTree[ind] = val;
    return;
  }
  int m = (l+r)>>1;
  if(ind2>m)
  {
    update(2*ind+1, m+1, r, ind2, val);
  }
  else{
    update(2*ind, l, m, ind2, val);
  }
  segTree[ind] = MAX(segTree[2*ind], segTree[2*ind+1]);
}
 
int segquery(int ind, int l, int r, int lo, int hi)
{
  if(l>hi or r<lo)return 0;
  if(lo>hi)return 0;
  if(l>=lo and r<=hi)return segTree[ind];
 
  int m = (l+r)>>1;
  int ans = segquery(2*ind, l, m, lo, MIN(hi, m));
  ans = MAX(ans, segquery(2*ind+1, m+1, r, MAX(m+1, lo), hi));
  return ans;
}
 
int query(int a, int b)
{
  int res = 0;
  // cout << a << " " << head[a] << "\n";
  // cout <<  b << " " << head[b] << "\n";
  for(;head[a]!=head[b];b = parent[head[b]])
  {
    if(depth[head[a]]>depth[head[b]])
    {
      swap(a, b);
    }
    int cur_path_max = segquery(1, 0, n-1, pos[head[b]], pos[b]);
    res = MAX(res, cur_path_max);
  }
  if(depth[a]>depth[b])
  {
    swap(a, b);
  }
  int cur_path_max = segquery(1, 0, n-1, pos[a]+1, pos[b]);
  res = MAX(res, cur_path_max);
  return res;
}
 
int dfs(int ind, int p)
{
  int sz = 1;
  int mx_sz = 0;
  parent[ind] = p;
  depth[ind] = depth[p]+1; 
  for(auto [x, y]: adj[ind])
  {
    if(x==p)continue;
    int c_size = dfs(x, ind);
    edgVal[x] = y;
    sz += c_size;
    if(c_size>mx_sz)
    {
      heavy[ind] = x;
      mx_sz = c_size;
    }
  }
  return sz;
}
 
void decompose(int ind, int h)
{
  head[ind] = h;
  pos[ind] = cur_pos++;
  euler.push_back(ind);
 
  if(heavy[ind]!=-1)decompose(heavy[ind], h);
  for(auto [x, y]: adj[ind])
  {
    if(x!=heavy[ind] and x!=parent[ind])decompose(x, x);
  }
}
 
void build(int ind, int l, int r)
{
  if(l==r)
  {
    segTree[ind] = vals[l];
    return;
  }
  int m = (l+r)>>1;
  build(2*ind, l, m);
  build(2*ind+1, m+1, r);
  segTree[ind] = MAX(segTree[2*ind], segTree[2*ind+1]);
}
